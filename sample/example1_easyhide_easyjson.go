// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package sample

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson291b620aDecodeGithubComDenis96zGoEasyhideSample(in *jlexer.Lexer, out *tp5dd67f7fb9c529cb28245800137482c9c2fdff9b7d22f54cd3bfa90c59b78481) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "c1":
			easyjson291b620aDecodeGithubComDenis96zGoEasyhideSample1(in, &out.C1)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson291b620aEncodeGithubComDenis96zGoEasyhideSample(out *jwriter.Writer, in tp5dd67f7fb9c529cb28245800137482c9c2fdff9b7d22f54cd3bfa90c59b78481) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"c1\":"
		out.RawString(prefix[1:])
		easyjson291b620aEncodeGithubComDenis96zGoEasyhideSample1(out, in.C1)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v tp5dd67f7fb9c529cb28245800137482c9c2fdff9b7d22f54cd3bfa90c59b78481) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson291b620aEncodeGithubComDenis96zGoEasyhideSample(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v tp5dd67f7fb9c529cb28245800137482c9c2fdff9b7d22f54cd3bfa90c59b78481) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson291b620aEncodeGithubComDenis96zGoEasyhideSample(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *tp5dd67f7fb9c529cb28245800137482c9c2fdff9b7d22f54cd3bfa90c59b78481) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson291b620aDecodeGithubComDenis96zGoEasyhideSample(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *tp5dd67f7fb9c529cb28245800137482c9c2fdff9b7d22f54cd3bfa90c59b78481) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson291b620aDecodeGithubComDenis96zGoEasyhideSample(l, v)
}
func easyjson291b620aDecodeGithubComDenis96zGoEasyhideSample1(in *jlexer.Lexer, out *T4) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "d1":
			out.D1 = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson291b620aEncodeGithubComDenis96zGoEasyhideSample1(out *jwriter.Writer, in T4) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"d1\":"
		out.RawString(prefix[1:])
		out.String(string(in.D1))
	}
	out.RawByte('}')
}
func easyjson291b620aDecodeGithubComDenis96zGoEasyhideSample2(in *jlexer.Lexer, out *tp1f93603db53bfad5c92390f735d0cbb8617b4ab8214ae91c5664a3d1e9b009c8) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "a1":
			out.A1 = string(in.String())
		case "a2":
			out.A2 = string(in.String())
		case "A3":
			out.A3 = string(in.String())
		case "A4":
			out.A4 = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson291b620aEncodeGithubComDenis96zGoEasyhideSample2(out *jwriter.Writer, in tp1f93603db53bfad5c92390f735d0cbb8617b4ab8214ae91c5664a3d1e9b009c8) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"a1\":"
		out.RawString(prefix[1:])
		out.String(string(in.A1))
	}
	{
		const prefix string = ",\"a2\":"
		out.RawString(prefix)
		out.String(string(in.A2))
	}
	{
		const prefix string = ",\"A3\":"
		out.RawString(prefix)
		out.String(string(in.A3))
	}
	{
		const prefix string = ",\"A4\":"
		out.RawString(prefix)
		out.String(string(in.A4))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v tp1f93603db53bfad5c92390f735d0cbb8617b4ab8214ae91c5664a3d1e9b009c8) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson291b620aEncodeGithubComDenis96zGoEasyhideSample2(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v tp1f93603db53bfad5c92390f735d0cbb8617b4ab8214ae91c5664a3d1e9b009c8) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson291b620aEncodeGithubComDenis96zGoEasyhideSample2(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *tp1f93603db53bfad5c92390f735d0cbb8617b4ab8214ae91c5664a3d1e9b009c8) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson291b620aDecodeGithubComDenis96zGoEasyhideSample2(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *tp1f93603db53bfad5c92390f735d0cbb8617b4ab8214ae91c5664a3d1e9b009c8) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson291b620aDecodeGithubComDenis96zGoEasyhideSample2(l, v)
}
